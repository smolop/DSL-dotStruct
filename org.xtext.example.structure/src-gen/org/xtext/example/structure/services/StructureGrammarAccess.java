/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.structure.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StructureGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RaizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.structure.Structure.Raiz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRaizKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCarpetasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCarpetasCarpetaParserRuleCall_3_0 = (RuleCall)cCarpetasAssignment_3.eContents().get(0);
		private final Assignment cContentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContentsContentParserRuleCall_4_0 = (RuleCall)cContentsAssignment_4.eContents().get(0);
		
		//Raiz:
		//	'Raiz' name=ID ':'
		//	carpetas+=Carpeta*
		//	contents+=Content*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Raiz' name=ID ':' carpetas+=Carpeta* contents+=Content*
		public Group getGroup() { return cGroup; }
		
		//'Raiz'
		public Keyword getRaizKeyword_0() { return cRaizKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//carpetas+=Carpeta*
		public Assignment getCarpetasAssignment_3() { return cCarpetasAssignment_3; }
		
		//Carpeta
		public RuleCall getCarpetasCarpetaParserRuleCall_3_0() { return cCarpetasCarpetaParserRuleCall_3_0; }
		
		//contents+=Content*
		public Assignment getContentsAssignment_4() { return cContentsAssignment_4; }
		
		//Content
		public RuleCall getContentsContentParserRuleCall_4_0() { return cContentsContentParserRuleCall_4_0; }
	}
	public class CarpetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.structure.Structure.Carpeta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCarpetaAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSolidusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cChildsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cChildsCarpetaParserRuleCall_4_1_0 = (RuleCall)cChildsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFilesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cFilesContentCrossReference_6_1_0 = (CrossReference)cFilesAssignment_6_1.eContents().get(0);
		private final RuleCall cFilesContentIDTerminalRuleCall_6_1_0_1 = (RuleCall)cFilesContentCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Carpeta:
		//	{Carpeta} path=STRING?
		//	name=STRING '/' ('[' childs+=Carpeta* ']')? ','? ('(' files+=[Content]* ')')?
		//	';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Carpeta} path=STRING? name=STRING '/' ('[' childs+=Carpeta* ']')? ','? ('(' files+=[Content]* ')')? ';'?
		public Group getGroup() { return cGroup; }
		
		//{Carpeta}
		public Action getCarpetaAction_0() { return cCarpetaAction_0; }
		
		//path=STRING?
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//('[' childs+=Carpeta* ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//childs+=Carpeta*
		public Assignment getChildsAssignment_4_1() { return cChildsAssignment_4_1; }
		
		//Carpeta
		public RuleCall getChildsCarpetaParserRuleCall_4_1_0() { return cChildsCarpetaParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
		
		//','?
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//('(' files+=[Content]* ')')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//files+=[Content]*
		public Assignment getFilesAssignment_6_1() { return cFilesAssignment_6_1; }
		
		//[Content]
		public CrossReference getFilesContentCrossReference_6_1_0() { return cFilesContentCrossReference_6_1_0; }
		
		//ID
		public RuleCall getFilesContentIDTerminalRuleCall_6_1_0_1() { return cFilesContentIDTerminalRuleCall_6_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.structure.Structure.Content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContenidoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExtExtensionParserRuleCall_2_0 = (RuleCall)cExtAssignment_2.eContents().get(0);
		private final Keyword cTextKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTextSTRINGTerminalRuleCall_4_0 = (RuleCall)cTextAssignment_4.eContents().get(0);
		private final Keyword c_ENDKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Content:
		//	'Contenido:' name=ID ext=Extension?
		//	'text:' text=STRING
		//	'_END';
		@Override public ParserRule getRule() { return rule; }
		
		//'Contenido:' name=ID ext=Extension? 'text:' text=STRING '_END'
		public Group getGroup() { return cGroup; }
		
		//'Contenido:'
		public Keyword getContenidoKeyword_0() { return cContenidoKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//ext=Extension?
		public Assignment getExtAssignment_2() { return cExtAssignment_2; }
		
		//Extension
		public RuleCall getExtExtensionParserRuleCall_2_0() { return cExtExtensionParserRuleCall_2_0; }
		
		//'text:'
		public Keyword getTextKeyword_3() { return cTextKeyword_3; }
		
		//text=STRING
		public Assignment getTextAssignment_4() { return cTextAssignment_4; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_4_0() { return cTextSTRINGTerminalRuleCall_4_0; }
		
		//'_END'
		public Keyword get_ENDKeyword_5() { return c_ENDKeyword_5; }
	}
	public class ExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.structure.Structure.Extension");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTxtKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMdKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cXmlKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Extension:
		//	'.txt' | '.md' | '.xml';
		@Override public ParserRule getRule() { return rule; }
		
		//'.txt' | '.md' | '.xml'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.txt'
		public Keyword getTxtKeyword_0() { return cTxtKeyword_0; }
		
		//'.md'
		public Keyword getMdKeyword_1() { return cMdKeyword_1; }
		
		//'.xml'
		public Keyword getXmlKeyword_2() { return cXmlKeyword_2; }
	}
	
	
	private final RaizElements pRaiz;
	private final CarpetaElements pCarpeta;
	private final ContentElements pContent;
	private final ExtensionElements pExtension;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StructureGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRaiz = new RaizElements();
		this.pCarpeta = new CarpetaElements();
		this.pContent = new ContentElements();
		this.pExtension = new ExtensionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.structure.Structure".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Raiz:
	//	'Raiz' name=ID ':'
	//	carpetas+=Carpeta*
	//	contents+=Content*;
	public RaizElements getRaizAccess() {
		return pRaiz;
	}
	
	public ParserRule getRaizRule() {
		return getRaizAccess().getRule();
	}
	
	//Carpeta:
	//	{Carpeta} path=STRING?
	//	name=STRING '/' ('[' childs+=Carpeta* ']')? ','? ('(' files+=[Content]* ')')?
	//	';'?;
	public CarpetaElements getCarpetaAccess() {
		return pCarpeta;
	}
	
	public ParserRule getCarpetaRule() {
		return getCarpetaAccess().getRule();
	}
	
	//Content:
	//	'Contenido:' name=ID ext=Extension?
	//	'text:' text=STRING
	//	'_END';
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//Extension:
	//	'.txt' | '.md' | '.xml';
	public ExtensionElements getExtensionAccess() {
		return pExtension;
	}
	
	public ParserRule getExtensionRule() {
		return getExtensionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
