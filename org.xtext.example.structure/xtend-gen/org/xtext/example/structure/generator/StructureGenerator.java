/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.structure.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.structure.structure.Carpeta;
import org.xtext.example.structure.structure.Content;
import org.xtext.example.structure.structure.Raiz;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class StructureGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Raiz> _filter = Iterables.<Raiz>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Raiz.class);
    for (final Raiz r : _filter) {
      {
        final Date now = new Date();
        final SimpleDateFormat dateFormat = new SimpleDateFormat("yyMMdd-hhmmss");
        final String time = dateFormat.format(now);
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("~/");
        String _name = r.getName();
        _builder.append(_name);
        _builder.append("/");
        final String path = _builder.toString();
        String _name_1 = r.getName();
        String _plus = (("../output/" + time) + _name_1);
        String _plus_1 = (_plus + "/");
        String _name_2 = r.getName();
        String _plus_2 = (_plus_1 + _name_2);
        final String output = (_plus_2 + "/");
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append(output);
        fsa.generateFile(_builder_1.toString(), this.compile(fsa, r, output, path));
      }
    }
  }
  
  public CharSequence compile(final IFileSystemAccess2 fsa, final Raiz r, final String path, final String tagPath) {
    StringConcatenation _builder = new StringConcatenation();
    final Date now = Calendar.getInstance().getTime();
    _builder.newLineIfNotEmpty();
    final String content = (now + " - Auto generate content.");
    _builder.newLineIfNotEmpty();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(path);
    _builder_1.append("_Auto-Generate.xml");
    fsa.generateFile(_builder_1.toString(), this.generateContent(path, content, r.getName(), tagPath));
    _builder.newLineIfNotEmpty();
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append(path);
    _builder_2.append("config.xml");
    fsa.generateFile(_builder_2.toString(), this.generateContent(path, content, r.getName(), tagPath));
    _builder.append("\t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<Carpeta> _carpetas = r.getCarpetas();
      for(final Carpeta c : _carpetas) {
        _builder.append("\t");
        String _name = c.getName();
        String _plus = (path + _name);
        String _plus_1 = (_plus + "/");
        c.setPath(_plus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _name_1 = c.getName();
        String _plus_2 = (tagPath + _name_1);
        final String folderTag = (_plus_2 + "/");
        _builder.newLineIfNotEmpty();
        CharSequence _generateFolder = this.generateFolder(fsa, c, folderTag);
        _builder.append(_generateFolder);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence generateFolder(final IFileSystemAccess2 fsa, final Carpeta carpeta, final String tagPath) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generatorFiles = this.generatorFiles(fsa, carpeta, tagPath);
    _builder.append(_generatorFiles);
    _builder.newLineIfNotEmpty();
    {
      int _size = carpeta.getChilds().size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        {
          EList<Carpeta> _childs = carpeta.getChilds();
          for(final Carpeta subCarpeta : _childs) {
            String _path = carpeta.getPath();
            String _name = subCarpeta.getName();
            String _plus = (_path + _name);
            String _plus_1 = (_plus + "/");
            subCarpeta.setPath(_plus_1);
            _builder.newLineIfNotEmpty();
            String _name_1 = subCarpeta.getName();
            String _plus_2 = (tagPath + _name_1);
            final String folderTagPath = (_plus_2 + "/");
            _builder.append(" ");
            _builder.newLineIfNotEmpty();
            Object _generateFolder = this.generateFolder(fsa, subCarpeta, folderTagPath);
            _builder.append(_generateFolder);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  /**
   * def generateLinksFolders(Carpeta carpeta) {
   * if (carpeta.links.size > 0){
   * for( Carpeta c : carpeta.links){
   * val targetPath = new File(carpeta.path).getAbsolutePath()
   * val linkPath = new File(c.path).getAbsolutePath()
   * println(linkPath + " : " + targetPath)
   * Files.createLink(Paths.get(linkPath), Paths.get(targetPath))
   * }
   * }
   * }
   */
  public CharSequence generateEmptyFolder(final IFileSystemAccess2 fsa, final Carpeta carpeta, final Carpeta linkedFolder) {
    StringConcatenation _builder = new StringConcatenation();
    StringConcatenation _builder_1 = new StringConcatenation();
    String _path = carpeta.getPath();
    _builder_1.append(_path);
    _builder_1.append("/refTo/");
    String _name = linkedFolder.getName();
    _builder_1.append(_name);
    fsa.generateFile(_builder_1.toString(), "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generatorFiles(final IFileSystemAccess2 fsa, final Carpeta carpeta, final String tagPath) {
    StringConcatenation _builder = new StringConcatenation();
    final String content = "Auto generate content.";
    _builder.newLineIfNotEmpty();
    StringConcatenation _builder_1 = new StringConcatenation();
    String _path = carpeta.getPath();
    _builder_1.append(_path);
    _builder_1.append("_Auto-Generate.xml");
    fsa.generateFile(_builder_1.toString(), this.generateContent(carpeta.getPath(), content, carpeta.getName(), tagPath));
    _builder.newLineIfNotEmpty();
    {
      int _size = carpeta.getFiles().size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        {
          EList<Content> _files = carpeta.getFiles();
          for(final Content c : _files) {
            CharSequence _generateContent = this.generateContent(fsa, carpeta, c, tagPath);
            _builder.append(_generateContent);
            _builder.append("\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateContent(final String path, final String content, final String rootTag, final String tagPath) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<");
    _builder.append(rootTag);
    _builder.append(" path=\"");
    _builder.append(tagPath);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("<!-- ");
    Date _time = Calendar.getInstance().getTime();
    _builder.append(_time);
    _builder.append(" - Auto Generate XML Document -->");
    _builder.newLineIfNotEmpty();
    _builder.append("<content>");
    _builder.newLine();
    _builder.append(content);
    _builder.newLineIfNotEmpty();
    _builder.append("</content>");
    _builder.newLine();
    _builder.append("</");
    _builder.append(rootTag);
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateContent(final IFileSystemAccess2 fsa, final Carpeta c, final Content f, final String tagPath) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _ext = f.getExt();
      boolean _equals = Objects.equal(_ext, ".xml");
      if (_equals) {
        StringConcatenation _builder_1 = new StringConcatenation();
        String _path = c.getPath();
        String _name = f.getName();
        String _plus = (_path + _name);
        String _ext_1 = f.getExt();
        String _plus_1 = (_plus + _ext_1);
        _builder_1.append(_plus_1);
        fsa.generateFile(_builder_1.toString(), this.generateXML(c, f, tagPath));
        _builder.newLineIfNotEmpty();
      } else {
        if ((Objects.equal(f.getExt(), ".txt") || Objects.equal(f.getExt(), ".md"))) {
          StringConcatenation _builder_2 = new StringConcatenation();
          String _path_1 = c.getPath();
          String _name_1 = f.getName();
          String _plus_2 = (_path_1 + _name_1);
          String _ext_2 = f.getExt();
          String _plus_3 = (_plus_2 + _ext_2);
          _builder_2.append(_plus_3);
          fsa.generateFile(_builder_2.toString(), this.generateTEXT(c, f, tagPath));
          _builder.newLineIfNotEmpty();
        } else {
          StringConcatenation _builder_3 = new StringConcatenation();
          String _path_2 = c.getPath();
          _builder_3.append(_path_2);
          _builder_3.append("_Auto-Generate.xml");
          fsa.generateFile(_builder_3.toString(), this.generateContent(c.getPath(), f.getText(), f.getName(), tagPath));
          _builder.append("\t\t\t\t\t\t");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateXML(final Carpeta c, final Content f, final String tagPath) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<");
    String _name = c.getName();
    _builder.append(_name);
    _builder.append(" path=\"");
    _builder.append(tagPath);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("<!-- ");
    Date _time = Calendar.getInstance().getTime();
    _builder.append(_time);
    _builder.append(" - Auto Generate XML Document -->");
    _builder.newLineIfNotEmpty();
    _builder.append("<content>");
    _builder.newLine();
    String _text = f.getText();
    _builder.append(_text);
    _builder.newLineIfNotEmpty();
    _builder.append("</content>");
    _builder.newLine();
    _builder.append("</");
    String _name_1 = c.getName();
    _builder.append(_name_1);
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateTEXT(final Carpeta c, final Content f, final String tagPath) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("FOLDER: ");
    String _name = c.getName();
    _builder.append(_name);
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append("PATH:  ");
    _builder.append(tagPath);
    _builder.newLineIfNotEmpty();
    _builder.append("DATE: ");
    Date _time = Calendar.getInstance().getTime();
    _builder.append(_time);
    _builder.newLineIfNotEmpty();
    _builder.append("<!-- Auto Generate Document -->");
    _builder.newLine();
    _builder.append("CONTENT:");
    _builder.newLine();
    String _text = f.getText();
    _builder.append(_text);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
