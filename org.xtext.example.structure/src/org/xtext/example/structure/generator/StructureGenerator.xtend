/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.structure.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.structure.structure.Raiz
import org.xtext.example.structure.structure.Carpeta
import org.xtext.example.structure.structure.Content
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Calendar
import java.nio.file.Files
import java.nio.file.Paths
import java.io.File
import java.nio.file.Path

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StructureGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for( r : resource.allContents.toIterable.filter(Raiz)) {
			val now = new Date();
			val dateFormat = new SimpleDateFormat("yyMMdd-hhmmss");
			val time = dateFormat.format(now);
			val path = '''~/«r.name»/'''
			val output = "../output/"+time+r.name+"/"+r.name+ "/"
			fsa.generateFile('''«output»''', compile(fsa, r, output, path))
		}	
	}
	
	def compile(IFileSystemAccess2 fsa, Raiz r, String path, String tagPath) '''
		«val now = Calendar.getInstance().getTime()»
		«val String content = now + " - Auto generate content."»
		«fsa.generateFile('''«path»_Auto-Generate.xml''', generateContent(path, content, r.name, tagPath))»
		«fsa.generateFile('''«path»config.xml''', generateContent(path, content, r.name, tagPath))»		
		«FOR Carpeta c : r.carpetas»
			«c.path = path + c.name + "/"»
			«val folderTag = tagPath + c.name + "/"»
		«generateFolder(fsa, c, folderTag)»
		«ENDFOR»
	'''
	
	def generateFolder(IFileSystemAccess2 fsa, Carpeta carpeta, String tagPath)'''
		«generatorFiles(fsa, carpeta, tagPath)»
		«IF carpeta.childs.size > 0»
			«FOR Carpeta subCarpeta : carpeta.childs»
				«subCarpeta.path = carpeta.path + subCarpeta.name + "/"»
				«val folderTagPath = tagPath + subCarpeta.name + "/"» 
				«generateFolder(fsa, subCarpeta, folderTagPath)»
			«ENDFOR»
		«ENDIF»
	'''
	
/** 	
 	def generateLinksFolders(Carpeta carpeta) {
			if (carpeta.links.size > 0){
			for( Carpeta c : carpeta.links){
				val targetPath = new File(carpeta.path).getAbsolutePath()
				val linkPath = new File(c.path).getAbsolutePath()
				println(linkPath + " : " + targetPath)
				Files.createLink(Paths.get(linkPath), Paths.get(targetPath))
			}
		}
	}
	**/
	
	def generateEmptyFolder(IFileSystemAccess2 fsa, Carpeta carpeta, Carpeta linkedFolder) '''
		«fsa.generateFile('''«carpeta.path»/refTo/«linkedFolder.name»''', '')»
	'''
	
	def generatorFiles(IFileSystemAccess2 fsa, Carpeta carpeta, String tagPath)'''
		«val content = "Auto generate content."»
		«fsa.generateFile('''«carpeta.path»_Auto-Generate.xml''', generateContent(carpeta.path, content, carpeta.name, tagPath))»
		«IF carpeta.files.size > 0»
			«FOR Content c : carpeta.files»
				«generateContent(fsa, carpeta, c, tagPath)»	
			«ENDFOR»	
		«ENDIF»	
	'''

	def generateContent(String path, String content, String rootTag, String tagPath)'''
		<«rootTag» path="«tagPath»">
		<!-- «Calendar.getInstance().getTime()» - Auto Generate XML Document -->
		<content>
		«content»
		</content>
		</«rootTag»>
	'''
	
		def generateContent(IFileSystemAccess2 fsa, Carpeta c, Content f, String tagPath)'''
		«IF f.ext == ".xml"»
			«fsa.generateFile('''«c.path+f.name+f.ext»''', generateXML(c, f, tagPath))»
		«ELSEIF f.ext == ".txt" || f.ext == ".md"»
			«fsa.generateFile('''«c.path+f.name+f.ext»''', generateTEXT(c, f, tagPath))»
		«ELSE»
			«fsa.generateFile('''«c.path»_Auto-Generate.xml''', generateContent(c.path, f.text, f.name, tagPath))»						
		«ENDIF»
	'''
	
		def generateXML(Carpeta c, Content f, String tagPath)'''
		<«c.name» path="«tagPath»">
		<!-- «Calendar.getInstance().getTime()» - Auto Generate XML Document -->
		<content>
		«f.text»
		</content>
		</«c.name»>
	'''
	
			def generateTEXT(Carpeta c, Content f, String tagPath)'''
		FOLDER: «c.name».
		PATH:  «tagPath»
		DATE: «Calendar.getInstance().getTime()»
		<!-- Auto Generate Document -->
		CONTENT:
		«f.text»
	'''
	
}
