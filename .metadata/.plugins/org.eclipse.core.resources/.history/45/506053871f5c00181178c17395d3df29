/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.structure.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.structure.structure.Raiz
import org.xtext.example.structure.structure.Carpeta
import org.xtext.example.structure.structure.Content
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Calendar

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StructureGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for( r : resource.allContents.toIterable.filter(Raiz)) {
			val now = new Date();
			val dateFormat = new SimpleDateFormat("yyMMdd-hhmmss");
			val time = dateFormat.format(now);
			val path = '''~/«r.name»/'''
			val output = "../output/"+time+path
			fsa.generateFile('''«output»''', compile(fsa, r, output, path))
		}	
	}
	
	def compile(IFileSystemAccess2 fsa, Raiz r, String path, String tagPath) '''
	«val now = Calendar.getInstance().getTime()»
	«val String content = now + " - Auto generate content."»
	«fsa.generateFile('''«path»_Auto-Generate.xml''', generateContent(path, content, r.name, tagPath))»
	«FOR Carpeta c : r.carpetas»
		«val folderPath = path + c.name + "/"»
		«val folderTag = tagPath + c.name + "/"»
		«generateFolder(fsa, c, folderPath, folderTag)»
	«ENDFOR»
	'''
	
	def generateFolder(IFileSystemAccess2 fsa, Carpeta carpeta, String path, String tagPath)'''
		«generatorFiles(fsa, carpeta, path, tagPath)»
		
		«IF carpeta.childs.size > 0»
			«FOR Carpeta subCarpeta : carpeta.childs»
				«carpeta.path = path + "/" + subCarpeta.name + "/"»
				«val folderPath = path + "/" + subCarpeta.name + "/"»
				«val folderTagPath = tagPath + subCarpeta.name + "/"» 
				«generateFolder(fsa, subCarpeta, carpeta.path, folderTagPath)»
			«ENDFOR»
		«ENDIF»
	'''
	
	def generatorFiles(IFileSystemAccess2 fsa, Carpeta carpeta, String path, String tagPath)'''
		«val content = "Auto generate content."»
		«fsa.generateFile('''«path»_Auto-Generate.xml''', generateContent(path, content, carpeta.name, tagPath))»
		«IF carpeta.files.size > 0»
			«FOR Content c : carpeta.files»
				«generateContent(fsa, path, c, carpeta.name, tagPath)»	
			«ENDFOR»	
		«ENDIF»	
	'''

	def generateContent(String path, String content, String rootTag, String tagPath)'''
		<«rootTag» path="«tagPath»">
		<!-- «Calendar.getInstance().getTime()» - Auto Generate XML Document -->
		<content>
		«content»
		</content>
		</«rootTag»>
	'''
	
		def generateContent(IFileSystemAccess2 fsa, String path, Content c, String rootTag, String tagPath)'''
		«IF c.ext == ".xml"»
			«fsa.generateFile('''«path+c.name+c.ext»''', generateXML(path, c, rootTag, tagPath))»
		«ELSEIF c.ext == ".txt" || c.ext == ".md"»
			«fsa.generateFile('''«path+c.name+c.ext»''', generateTEXT(path, c, rootTag, tagPath))»
		«ELSE»
			«fsa.generateFile('''«path»_Auto-Generate.xml''', generateContent(path, c.text, c.name, tagPath))»						
		«ENDIF»
	'''
	
		def generateXML(String path, Content c, String rootTag, String tagPath)'''
		<«rootTag» path="«tagPath»">
		<!-- «Calendar.getInstance().getTime()» - Auto Generate XML Document -->
		<content>
		«c.text»
		</content>
		</«rootTag»>
	'''
	
			def generateTEXT(String path, Content c, String rootTag, String tagPath)'''
		FOLDER: «rootTag».
		PATH:  «tagPath»
		DATE: «Calendar.getInstance().getTime()»
		<!-- Auto Generate Document -->
		CONTENT:
		«c.text»
	'''
	
}
